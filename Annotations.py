# Author: Erik Clarke
# The Scripps Research Institute, 2012
"""
Methods to manipulate Gene Ontology annotations, create historical versions,
expand annotations up the ontology heirarchy, etc.
"""

import re
import json
from copy import deepcopy
from collections import defaultdict

# hooray for global vars
verbose = False


def _append(_dict, key, val, use='set'):
    """Uses a defaultdict to append values to whatever
    container is being used."""
    assert isinstance(_dict, defaultdict)
    if use == 'set':
        assert isinstance(val, set)
        _dict[key] = _dict[key].union(val)
    elif use == 'list':
        _dict[key].append(val)
    elif use == 'dict':
        assert isinstance(val, dict)
        _dict[key].update(val)
    else:
        raise ValueError


def _import_goa(goafile):
    h = [x.strip('\n').split('\t') for x in open(goafile).readlines() if not x.startswith('!')]
    return h


def parse_goa(goafile, filter_nonuniprot=True, filter_iea=False):
    goa = _import_goa(goafile)
    gdict = defaultdict(set)
    if verbose:
        print set([x[0] for x in goa])
    for line in goa:
        if (filter_nonuniprot and 'UniProt' in line[0]) or (filter_iea and line[6] != 'IEA'):
            _append(gdict, line[1], set(line[4]))
            if verbose:
                print 'added ', line[1], set(line[4])
    return gdict


def flip_goa(goa):
    """Returns a dict with GO terms as keys and list of annotated genes as values."""
    if verbose:
        print "flipping goa"
    gdict = defaultdict(set)
    for gene in goa:
        for go in goa[gene]:
            gdict[go].add(gene)
    return gdict


def parse_obs(obsfile):
    """Parse the obsolete uniprot IDs as returned by UniProt's web service."""
    h = [x.strip('\n').split('\t') for x in open(obsfile).readlines()]
    obsdict = {}
    for line in h:
        name = ''
        if line[1].startswith('Merged'):
            name = [line[1].replace('Merged into ', '').strip('.')]
        elif line[1].startswith('Demerged'):
            name = [x.group() for x in re.finditer(r'[A-Z0-9]{6}', line[1])]
        obsdict[line[0]] = name
    return obsdict


def replace_obs(goa, obs):
    """Finds any obsolete UniProt IDs, deletes them, and adds their annotations
    to their replacements. For deleted ids, the annotations are also deleted."""
    goa_cp = deepcopy(goa)
    for uniprot in goa:
        if uniprot in obs:
            replacements = obs[uniprot]
            del goa_cp[uniprot]
            for r in replacements:
                _append(goa_cp, r, goa[uniprot])
            if verbose:
                print "deleted ", uniprot
    return goa_cp


def import_replace_flip_expand(goafile, obsfile, flatfile):
    """This does all the necessary transformations to a gene annotation
    file given a list of obsolete UniProt terms and a flattened file
    that describes all isa and has_part relationships."""
    obs = parse_obs(obsfile)
    gof = parse_flat(flatfile)
    goa = expand_goa(
            flip_goa(
                replace_obs(
                    parse_goa(goafile),
                obs)),
          gof)
    return goa


def parse_flat(goflatfile):
    """Parses the flat files generated by Ben's ontology flattener."""
    f = [x.strip('\n\t').split('\t') for x in open(goflatfile)]
    fdict = defaultdict(set)
    for line in f:
        _append(fdict, line[0], set(line[1:]))
    return fdict


def expand_goa(fgoa, go):
    """Takes a flipped goa file (GO terms as keys) and expands the annotations upwards"""
    fgoa_cp = deepcopy(fgoa)
    for goterm in fgoa:
        if goterm in go:
            for parent in go[goterm]:
                _append(fgoa_cp, parent, set(fgoa[goterm]))
    return fgoa_cp


def parse_obo(obofile):
    with open(obofile) as obo:
        entry = None
        for line in obo:
            line = line.strip('\n')
            if '[Term]' in line:
                if entry:
                    yield entry
                entry = {'type': 'Term'}
            elif entry and ': ' in line:
                k, v = line.split(': ', 1)
                entry[k] = v


def goa2gmt(fgoa, obo=None):
    lines = []
    for entry in fgoa:
        if entry in obo:
            desc = obo[entry]
        else:
            desc = 'n/a'
        line = [entry, desc] + list(fgoa[entry])
        lines.append('\t'.join(line) + '\n')
    return lines


def import_annotations(goafile, obsfile, flatfile, obofile, year=None):
    goa = import_replace_flip_expand(goafile, obsfile, flatfile)
    obo = {}
    for term in parse_obo(obofile):
        obo[term['id']] = term
    annotations = {'meta': {'year': year}, 'anno': {}}
    for entry in goa:
        annotations['anno'][entry] = {
            'name': obo[entry]['name'] if entry in obo else 'n/a',
            'genes': list(goa[entry])
        }
    return annotations
